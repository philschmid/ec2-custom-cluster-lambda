# aws --profile xxx cloudformation create-stack --stack-name ec2-custom-cluster --template-body file://<(cfn-flip cfn-create-group.yaml) --parameters ParameterKey=STAGE,ParameterValue=qa
# aws --profile xxx  cloudformation update-stack --stack-name ec2-custom-cluster --template-body file://<(cfn-flip cfn-create-group.yaml) --parameters ParameterKey=STAGE,ParameterValue=qa

# aws cloudformation create-stack --stack-name ec2-custom-cluster --template-body file://<(cfn-flip template.yaml) --capabilities CAPABILITY_IAM
# aws cloudformation update-stack --stack-name ec2-custom-cluster --template-body file://<(cfn-flip template.yaml) --capabilities CAPABILITY_IAM

AWSTemplateFormatVersion: 2010-09-09
Description: "Creates Security-Groups for ec2"

Parameters:
  STAGE:
    Type: String
    Default: "qa"
  SERVICENAME:
    Type: String
    Default: "translator"
#   DEPLOYREGION:
#     Type: String
#     Default: "eu-central-1"

# Mappings:
#   SubnetConfig:
#     VPC:
#       CIDR: "10.0.0.0/16"
#     PublicOne:
#       CIDR: "10.0.0.0/24"
# PublicTwo:
#   CIDR: '10.0.1.0/24'
# PrivateOne:
#   CIDR: '10.0.2.0/24'
# PrivateTwo:
#   CIDR: '10.0.3.0/24'

Resources:
  # EC2VPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     EnableDnsSupport: true
  #     EnableDnsHostnames: true
  #     CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", ["security-group", !Ref SERVICENAME, !Ref STAGE]]
      GroupDescription: Launch-Group-sqs
      # VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: https
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          Description: https
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
        - IpProtocol: tcp
          Description: ssh
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          Description: ssh
          FromPort: 22
          ToPort: 22
          CidrIpv6: ::/0
      # SecurityGroupEgress:
      #   IpProtocol: -1
      #   CidrIp: 0.0.0.0/0
  # PublicSubnetOne:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: !Select
  #       - 0
  #       - Fn::GetAZs: !Ref "AWS::Region"
  #     VpcId: !Ref EC2VPC
  #     CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
  #     MapPublicIpOnLaunch: true
  EC2IAMRole:
    Type: AWS::IAM::Role
    Name: !Join ["-", ["ec2-iam-role", !Ref SERVICENAME, !Ref STAGE]]
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName:
            !Join ["-", ["ec2-iam-policy", !Ref SERVICENAME, !Ref STAGE]]
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "sqs:*"
                  - "s3:*"
                  - "logs:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:RunInstances"
                  - "ec2:AssociateIamInstanceProfile"
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - iam:PassRole
                  - ecr:GetAuthorizationToken
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                Resource: "*"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Name: !Join ["-", ["ec2-instance-profile", !Ref SERVICENAME, !Ref STAGE]]
    Properties:
      Path: /
      Roles:
        - !Ref EC2IAMRole
Outputs:
  # Export SQS-data
  SecurityGroup:
    Description: "Name of Security-Group"
    Value: !Ref SecurityGroup
    Export:
      Name:
        !Join ["-", ["security-group", "name", !Ref SERVICENAME, !Ref STAGE]]
  EC2Role:
    Description: "Name of EC2Role"
    Value: !Ref EC2IAMRole
    Export:
      Name: !Join ["-", ["iam-role", "name", !Ref SERVICENAME, !Ref STAGE]]
  EC2InstanceProfile:
    Description: "Name of EC2InstanceProfile"
    Value: !Ref EC2InstanceProfile
    Export:
      Name:
        !Join ["-", ["instance-profile", "name", !Ref SERVICENAME, !Ref STAGE]]
  # PublicSubnetOne:
  #   Description: "Description"
  #   Value: !Ref PublicSubnetOne
  #   Export:
  #     Name: SUBNET-NAME
